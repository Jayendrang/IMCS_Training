package AdvanceJavaAssignmentPart1;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.stream.Stream;

class Login {
	private Map<Integer,String> userCreds = new LinkedHashMap<Integer,String>();
	public void addLogin(int userId, String password) {
		userCreds.put(userId,password);
	}
	
	public void printUserInfo() {
		Iterator iterator = userCreds.keySet().iterator();
		while(iterator.hasNext()) {
			System.out.println(userCreds.get(iterator.next()));
		}
	}
	
	public boolean validateLoginDetails(int userid,String password) {
		if(userCreds.containsKey(userid)) {
			if(userCreds.get(userid).equals(password)) {
				return true;
			}
		}
		return false;
	}
	
}
class CustomerDetails implements Comparable<CustomerDetails>, Comparator<CustomerDetails> {

	int customerId;
	String customerName;
	boolean loanAvailed;

	public CustomerDetails() {
		// TODO Auto-generated constructor stub
	}

	public CustomerDetails(int id, String name, boolean loanstatus) {
		this.customerId = id;
		this.customerName = name;
		this.loanAvailed = loanstatus;
	}

	public int getCustomerId() {
		return customerId;
	}

	public void setCustomerId(int customerId) {
		this.customerId = customerId;
	}

	public String getCustomerName() {
		return customerName;
	}

	public void setCustomerName(String customerName) {
		this.customerName = customerName;
	}

	public boolean isLoanAvailed() {
		return loanAvailed;
	}

	public void setLoanAvailed(boolean loanAvailed) {
		this.loanAvailed = loanAvailed;
	}

	@Override
	public String toString() {
		// TODO Auto-generated method stub
		return this.customerName + "\t" + this.customerId + "\t" + this.loanAvailed;
	}

	@Override
	public int compare(CustomerDetails o1, CustomerDetails o2) {
		return o1.getCustomerId() - o2.getCustomerId();

	}

	@Override
	public int compareTo(CustomerDetails customer) {
		return this.customerId - customer.customerId;
	}

}

class CustomerDB {
	private static List<CustomerDetails> customerInfoDB = new ArrayList<>();

	public boolean saveNewCustomer(CustomerDetails details) {

		if (!this.equals(details)) {
			customerInfoDB.add(details);
			return true;
		} else {
			return false;
		}

	}

	public boolean saveNewCustomers(List<CustomerDetails> details) {
		if (!details.isEmpty()) {
			customerInfoDB.addAll(details);
			return true;
		} else {
			return false;
		}
	}

	public boolean equals(CustomerDetails data) {
		// TODO Auto-generated method stub
		return this.customerInfoDB.stream().anyMatch(a -> a.customerId == data.customerId);
	}

	public CustomerDetails loanAvailedCustomer(int id) throws NoSuchElementException {
		return customerInfoDB.stream().findAny().filter(al -> al.getCustomerId() == id).orElse(new CustomerDetails());
	}

	public void printCustomersListBasedOnLoanStatus() {
		System.out.println("Loan Availed Customer List");
		customerInfoDB.stream().map(a -> a).filter(a2 -> a2.loanAvailed == true).sorted()
				.forEach(a1 -> System.out.println(a1.toString()));

		System.out.println("\nCustomer who hasn't availed loan");
		customerInfoDB.stream().map(a -> a).filter(a2 -> a2.loanAvailed == false).sorted()
				.forEach(a1 -> System.out.println(a1.toString()));
	}
}

class BankLoginDetails {
	private static Map<Integer, String> CustomerCreds = new HashMap<>();

	public BankLoginDetails() {

	}

	public void addNewUserMap(Map<Integer, String> data) {
		CustomerCreds.putAll(data);
	}

	public void addNewUser(int userid, String username) {
		if (!CustomerCreds.containsKey(userid)) {
			CustomerCreds.put(userid, username);
		} else {
			System.out.println("UserId is already available");
		}
	}

	public void displayAllCustomerInfo() {
		Iterator iterator = CustomerCreds.keySet().iterator();
		System.out.println("UserName\t\tPassword");
		while (iterator.hasNext()) {
			int key = (Integer) iterator.next();

			System.out.println(key + "\t\t" + CustomerCreds.get(key));
		}
	}
}

class Account {
	private int accountNumber;
	private CustomerDetails customerDetails;
	protected double balance;

	public Account(int accNum, double balance, CustomerDetails cus_details) {
		this.accountNumber = accNum;
		this.balance = balance;
		this.customerDetails = cus_details;
	}

	public Account() {

	}

	public int getAccountNumber() {
		return accountNumber;
	}

	public void setAccountNumber(int accountNumber) {
		this.accountNumber = accountNumber;
	}

	public CustomerDetails getCustomerDetails() {
		return customerDetails;
	}

	public void setCustomerDetails(CustomerDetails customerDetails) {
		this.customerDetails = customerDetails;
	}

	public double getBalance() {
		return balance;
	}

	public void setBalance(double balance) {
		this.balance = balance;
	}

}

public class WellsBank {

	public static void main(String[] args) {

		// BankLoginDetails bankLoginDetails = new BankLoginDetails();
		// bankLoginDetails.addNewUser(1, "Jayendran");
		// bankLoginDetails.addNewUser(2, "Ramya");
		// bankLoginDetails.addNewUser(3, "Senthil");
		// bankLoginDetails.displayAllCustomerInfo();
		
		

		List<CustomerDetails> customerList = new ArrayList<CustomerDetails>() {
			{
				add(new CustomerDetails(1, "Appu", true));
				add(new CustomerDetails(10, "Dave", false));
				add(new CustomerDetails(12, "Ram", true));
				add(new CustomerDetails(11, "Jade", false));
				add(new CustomerDetails(20, "Haver", false));

			}
		};

		CustomerDB customerDB = new CustomerDB();
		customerDB.saveNewCustomers(customerList);
		CustomerDetails details = customerDB.loanAvailedCustomer(10);
		
		if (details.loanAvailed == true) {
			
			System.out.println(details.getCustomerId() + "\t" + details.getCustomerName() + "\t"
					+ details.isLoanAvailed() + "\n\n");
			
			
		} else {
			System.out.println("Customer not availed any loan \n\n");
		}
		customerDB.printCustomersListBasedOnLoanStatus();
		
	}

}